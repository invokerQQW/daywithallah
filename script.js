window.onload = function() {
    if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(showPrayerTimes, handleLocationError);
    } else {
        document.getElementById('location').textContent = "–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —ç—Ç–∏–º –±—Ä–∞—É–∑–µ—Ä–æ–º.";
    }

    // –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∞—è—Ç –∏ —Ö–∞–¥–∏—Å
    // –ü—Ä–∏–º–µ—Ä –º–∞—Å—Å–∏–≤–æ–≤. –ú–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä—è—Ç—å –∏–ª–∏ –±—Ä–∞—Ç—å –∏–∑ –æ—Ç–∫—Ä—ã—Ç—ã—Ö API
    const ayahs = [
        {arabic: "ÿ•ŸêŸÜŸéŸë ŸÖŸéÿπŸé ÿßŸÑŸíÿπŸèÿ≥Ÿíÿ±Ÿê ŸäŸèÿ≥Ÿíÿ±Ÿãÿß", translation: "–í–æ–∏—Å—Ç–∏–Ω—É, —Å —Ç—Ä—É–¥–Ω–æ—Å—Ç—è–º–∏ ‚Äì –æ–±–ª–µ–≥—á–µ–Ω–∏–µ (–°—É—Ä–∞ –∞—à-–®–∞—Ä—Ö 94:6)"},
        {arabic: "ÿßŸÑŸÑŸëŸéŸáŸè ŸÑŸéÿß ÿ•ŸêŸÑŸéŸ∞ŸáŸé ÿ•ŸêŸÑŸëŸéÿß ŸáŸèŸàŸé ÿßŸÑŸíÿ≠ŸéŸäŸëŸè ÿßŸÑŸíŸÇŸéŸäŸëŸèŸàŸÖŸè", translation: "–ê–ª–ª–∞—Ö ‚Äî –Ω–µ—Ç –±–æ–∂–µ—Å—Ç–≤–∞, –∫—Ä–æ–º–µ –ù–µ–≥–æ, –ñ–∏–≤–æ–≥–æ, –í—Å–µ–¥–µ—Ä–∂–∏—Ç–µ–ª—è (–ê—è—Ç—É–ª—å –ö—É—Ä—Å–∏)"},
    ];
    const hadiths = [
        "–ü—Ä–æ—Ä–æ–∫ –ú—É—Ö–∞–º–º–∞–¥ (–º–∏—Ä –µ–º—É –∏ –±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–µ) —Å–∫–∞–∑–∞–ª: ¬´–õ—É—á—à–∏–π –∏–∑ –≤–∞—Å —Ç–æ—Ç, –∫—Ç–æ –∏–∑—É—á–∞–µ—Ç –ö–æ—Ä–∞–Ω –∏ –æ–±—É—á–∞–µ—Ç –µ–º—É –¥—Ä—É–≥–∏—Ö¬ª. (–ë—É—Ö–∞—Ä–∏)",
        "–ü–æ—Å–ª–∞–Ω–Ω–∏–∫ –ê–ª–ª–∞—Ö–∞ —Å–∫–∞–∑–∞–ª: ¬´–õ–µ–≥–∫–æ –æ—Ç–Ω–æ—Å–∏—Ç–µ—Å—å –∫ –ª—é–¥—è–º, –Ω–µ —É—Å–ª–æ–∂–Ω—è–π—Ç–µ –∏–º. –î–∞—Ä—É–π—Ç–µ –∏–º —Ä–∞–¥–æ—Å—Ç—å –∏ –Ω–µ –æ—Ç–ø—É–≥–∏–≤–∞–π—Ç–µ¬ª (–ë—É—Ö–∞—Ä–∏ –∏ –ú—É—Å–ª–∏–º)",
    ];

    const today = new Date();
    const dayOfYear = Math.floor(
        (today - new Date(today.getFullYear(), 0, 0)) / 1000 / 60 / 60 / 24
    );
    const ayah = ayahs[dayOfYear % ayahs.length];
    const hadith = hadiths[dayOfYear % hadiths.length];

    document.getElementById('ayah').innerHTML = `<b>${ayah.arabic}</b><br>${ayah.translation}`;
    document.getElementById('hadith').textContent = hadith;
};

function showPrayerTimes(position) {
    const lat = position.coords.latitude;
    const lon = position.coords.longitude;
    document.getElementById('location').textContent = `–í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: ${lat.toFixed(2)}, ${lon.toFixed(2)}`;

    fetch(`https://api.aladhan.com/v1/timings?latitude=${lat}&longitude=${lon}&method=2`)
        .then(response => response.json())
        .then(data => {
            const timings = data.data.timings;
            let list = '';
            for (let key of ['Fajr', 'Dhuhr', 'Asr', 'Maghrib', 'Isha']) {
                list += `<li><strong>${key}:</strong> ${timings[key]}</li>`;
            }
            document.getElementById('times-list').innerHTML = list;
        })
        .catch(() => {
            document.getElementById('times-list').textContent = '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞–º–∞–∑–∞.';
        });
}

function handleLocationError(error) {
    document.getElementById('location').textContent = "–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞.";
    document.getElementById('times-list').textContent = '–í—Ä–µ–º—è –Ω–∞–º–∞–∑–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ.';
}
// =============== –ò—Å–ª–∞–º—Å–∫–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å ===============
const islamicMonths = [
    "–ú—É—Ö–∞—Ä—Ä–∞–º", "–°–∞—Ñ–∞—Ä", "–†–∞–±–∏' –∞–ª—å-–∞–≤–≤–∞–ª—å", "–†–∞–±–∏' –∞—Å-—Å–∞–Ω–∏", "–î–∂—É–º–∞–¥ –∞–ª—å-—É–ª—è", "–î–∂—É–º–∞–¥ –∞—Å-—Å–∞–Ω–∏",
    "–†–∞–¥–∂–∞–±", "–®–∞'–±–∞–Ω", "–†–∞–º–∞–¥–∞–Ω", "–®–∞–≤–≤–∞–ª—å", "–ó—É-–ª—å-–ö–∞'–¥–∞", "–ó—É-–ª—å-–•–∏–¥–∂–∞"
];

const gregorianMonths = [
    "–Ø–Ω–≤–∞—Ä—å","–§–µ–≤—Ä–∞–ª—å","–ú–∞—Ä—Ç","–ê–ø—Ä–µ–ª—å","–ú–∞–π","–ò—é–Ω—å",
    "–ò—é–ª—å","–ê–≤–≥—É—Å—Ç","–°–µ–Ω—Ç—è–±—Ä—å","–û–∫—Ç—è–±—Ä—å","–ù–æ—è–±—Ä—å","–î–µ–∫–∞–±—Ä—å"
];

// –î–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º Intl.DateTimeFormat (—Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–∞—Ö)
function toIslamicDate(date) {
    try {
        const options = { calendar: "islamic", day: "numeric", month: "long", year: "numeric" };
        const islamic = new Intl.DateTimeFormat('ru-TN-u-ca-islamic', options).formatToParts(date);
        const day = islamic.find(x => x.type === 'day').value;
        const month = islamic.find(x => x.type === 'month').value;
        const year = islamic.find(x => x.type === 'year').value;
        return {day, month, year};
    } catch (e) {
        // –§–æ–ª–±–µ–∫
        return {day: "-", month: "-", year: "-"};
    }
}

let calMonth = (new Date()).getMonth();
let calYear = (new Date()).getFullYear();

function renderCalendar(month, year) {
    const calendar = document.getElementById('calendar-table');
    const monthYearLabel = document.getElementById('calendar-month-year');
    const firstDay = new Date(year, month, 1).getDay();
    const daysInMonth = new Date(year, month + 1, 0).getDate();

    // –î–ª—è –†–æ—Å—Å–∏–∏ –Ω–µ–¥–µ–ª—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞
    const weekdays = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'];
    let html = `<tr>${weekdays.map(d=>`<th>${d}</th>`).join('')}</tr><tr>`;

    let startDay = (firstDay + 6) % 7; // –°–º–µ—â–∞–µ–º: –≤ JS 0=–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, –Ω–∞–º 0=–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
    for (let i = 0; i < startDay; i++) html += '<td></td>';

    const today = new Date();
    for (let date = 1; date <= daysInMonth; date++) {
        const current = new Date(year, month, date);
        const isToday = (date === today.getDate() && month === today.getMonth() && year === today.getFullYear());
        const islamic = toIslamicDate(current);

        html += `<td${isToday ? ' class="calendar-today"' : ''}>${date}
            <span class="islamic-date">${islamic.day} ${islamic.month.split(' ')[0]}</span>
        </td>`;

        if ((startDay + date) % 7 === 0 && date !== daysInMonth) html += '</tr><tr>';
    }
    // –î–æ–ø–æ–ª–Ω–∏—Ç—å –ø—É—Å—Ç—ã–º–∏ —è—á–µ–π–∫–∞–º–∏
    let filled = (startDay + daysInMonth);
    for (let i = filled; i % 7 !== 0; i++) html += '<td></td>';
    html += '</tr>';

    calendar.innerHTML = html;

    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞ –∏ –≥–æ–¥
    monthYearLabel.textContent = `${gregorianMonths[month]} ${year}`;
}

// –ö–Ω–æ–ø–∫–∏
document.getElementById('prev-month').onclick = () => {
    if (calMonth === 0) { calMonth = 11; calYear--; } else { calMonth--; }
    renderCalendar(calMonth, calYear);
};
document.getElementById('next-month').onclick = () => {
    if (calMonth === 11) { calMonth = 0; calYear++; } else { calMonth++; }
    renderCalendar(calMonth, calYear);
};

renderCalendar(calMonth, calYear);
// ===== –ù–æ—á–Ω–æ–π —Ä–µ–∂–∏–º =====
const darkModeBtn = document.getElementById('dark-mode-toggle');

// –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
if (localStorage.getItem('darkMode') === 'on') {
    document.body.classList.add('dark-mode');
    darkModeBtn.textContent = "‚òÄÔ∏è";
}

darkModeBtn.onclick = function() {
    document.body.classList.toggle('dark-mode');
    if (document.body.classList.contains('dark-mode')) {
        darkModeBtn.textContent = "‚òÄÔ∏è";
        localStorage.setItem('darkMode', 'on');
    } else {
        darkModeBtn.textContent = "üåô";
        localStorage.setItem('darkMode', 'off');
    }
};
// –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –∫–Ω–æ–ø–∫—É "–Ω–∞–≤–µ—Ä—Ö" –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ
const scrollBtn = document.getElementById('scrollToTopBtn');

window.addEventListener('scroll', () => {
    if (window.scrollY > 100) {
        scrollBtn.classList.add('show');
    } else {
        scrollBtn.classList.remove('show');
    }
});
